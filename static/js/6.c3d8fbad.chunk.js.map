{"version":3,"sources":["demo/views/Exam.jsx"],"names":["answers","JSON","parse","localStorage","getItem","file","a","fetch","checkStatus","response","json","data","ok","Error","status","statusText","mainContainer","css","nmrContainer","bottomContainer","bottomRightContainer","mfCss","resultContainer","copyButton","structureEditor","showButton","titleCss","resultCss","styles","CopyButton","result","useState","isCopied","setCopyFlag","saveToClipboardHandler","useCallback","success","copyTextToClipboard","setTimeout","type","onClick","Exam","props","setData","setResult","answerAreaVisible","showAnswerArea","title","baseURL","checkAnswer","answer","MolResponse","Molecule","fromMolfile","idCodeResponse","getIDCode","idCode","setItem","stringify","toSmiles","useEffect","loadData","then","d","_d","replace","molecules","molfile","molecule","currentAnswer","fromIDCode","toMolfile","mf","getMolecularFormula","formula","showAnswerAreaHander","prev","style","height","preferences","general","disableMultipletAnalysis","hideSetSumFromMolecule","panels","hidePeaksPanel","hideInformationPanel","hideRangesPanel","hideStructuresPanel","hideFiltersPanel","hideZonesPanel","hideSummaryPanel","hideMultipleSpectraAnalysisPanel","visibility","svgMenu","fragment","onChange","initialMolfile","color","fontSize"],"mappings":"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","file":"static/js/6.c3d8fbad.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { css } from '@emotion/react';\nimport { Molecule } from 'openchemlib/full';\nimport { useState, useEffect, useCallback } from 'react';\nimport { FaRegCopy, FaCheck } from 'react-icons/fa';\nimport { MF } from 'react-mf';\nimport { StructureEditor } from 'react-ocl/full';\n\nimport NMRium from '../../component/NMRium';\nimport { copyTextToClipboard } from '../../component/utility/Export.js';\n\nlet answers = JSON.parse(localStorage.getItem('nmrium-exams') || '{}');\n\nasync function loadData(file) {\n  const response = await fetch(file);\n  checkStatus(response);\n  const data = await response.json();\n  return data;\n}\n\nfunction checkStatus(response) {\n  if (!response.ok) {\n    throw new Error(`HTTP ${response.status} - ${response.statusText}`);\n  }\n  return response;\n}\n\nconst mainContainer = css`\n  display: flex;\n  flex-direction: column;\n  max-height: 100%;\n  overflow: hidden;\n`;\n\nconst nmrContainer = css`\n  height: 50%;\n`;\n\nconst bottomContainer = css`\n  display: flex;\n  height: 50%;\n`;\n\nconst bottomRightContainer = css`\n  width: 50%;\n  display: flex;\n  height: 100%;\n  flex-direction: column;\n`;\n\nconst mfCss = css`\n  height: 20%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: white;\n  border: 1px dashed gray;\n`;\n\nconst resultContainer = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 80%;\n  position: relative;\n`;\n\nconst copyButton = css`\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  width: 50px;\n  height: 40px;\n  outline: none;\n  border: none;\n  background-color: white;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:hover {\n    background-color: green;\n    color: white;\n  }\n`;\n\nconst structureEditor = css`\n  background-color: white;\n  flex: 1;\n  overflow: auto;\n`;\n\nconst showButton = css`\n  outline: none;\n  border: none;\n  border-top: 0.55px solid #c1c1c1;\n  border-bottom: 0.55px solid #c1c1c1;\n  color: #00b707;\n  font-weight: bold;\n  font-size: 12px;\n  padding: 5px;\n\n  &:hover {\n    color: white !important;\n    background-color: #00b707;\n  }\n`;\n\nconst titleCss = css`\n  text-transform: none;\n  margin: 0;\n  padding: 5px;\n  background-color: white;\n  font-size: 14px;\n  color: #3e3e3e;\n\n  p {\n    font-size: 10px;\n    margin: 0px;\n  }\n`;\n\nconst resultCss = css`\n  width: 50%;\n  height: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst styles = css`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  margin-left: 30px;\n  }\n`;\n\nconst CopyButton = ({ result }) => {\n  const [isCopied, setCopyFlag] = useState(false);\n\n  const saveToClipboardHandler = useCallback(() => {\n    const success = copyTextToClipboard(result);\n    setCopyFlag(success);\n    setTimeout(() => {\n      setCopyFlag(false);\n    }, 1000);\n  }, [result]);\n\n  return (\n    <button type=\"button\" css={copyButton} onClick={saveToClipboardHandler}>\n      {isCopied ? <FaCheck /> : <FaRegCopy />}\n    </button>\n  );\n};\n\nexport default function Exam(props) {\n  const [data, setData] = useState();\n  const [result, setResult] = useState(null);\n  const [answerAreaVisible, showAnswerArea] = useState(false);\n\n  const { file, title, baseURL } = props;\n\n  const checkAnswer = useCallback(\n    (response) => {\n      if (data.answer) {\n        const MolResponse = Molecule.fromMolfile(response);\n        const idCodeResponse = MolResponse.getIDCode();\n        answers[data.answer.idCode] = idCodeResponse;\n        localStorage.setItem('nmrium-exams', JSON.stringify(answers));\n        setResult(MolResponse.toSmiles());\n      }\n    },\n    [data],\n  );\n\n  useEffect(() => {\n    if (file) {\n      loadData(file).then((d) => {\n        const _d = JSON.parse(JSON.stringify(d).replace(/\\.\\/+?/g, baseURL));\n\n        if (_d && _d.molecules && _d.molecules[0] && _d.molecules[0].molfile) {\n          const molecule = Molecule.fromMolfile(_d.molecules[0].molfile);\n          const idCode = molecule.getIDCode();\n          let currentAnswer = answers[idCode];\n\n          if (currentAnswer) {\n            currentAnswer = Molecule.fromIDCode(currentAnswer).toMolfile();\n          }\n          _d.answer = {\n            idCode,\n            currentAnswer,\n            mf: molecule.getMolecularFormula().formula,\n          };\n          setData(_d);\n        }\n      });\n    } else {\n      setData({});\n    }\n  }, [baseURL, file, props]);\n\n  const showAnswerAreaHander = useCallback(() => {\n    showAnswerArea((prev) => !prev);\n  }, []);\n\n  return (\n    <div css={styles}>\n      <p css={titleCss}>\n        <strong>Exercises: </strong>Determine the unknown structure for the\n        compound having the following NMR spectrum\n        <p>{title}</p>\n      </p>\n      <div css={mainContainer}>\n        <div\n          css={nmrContainer}\n          style={{ height: answerAreaVisible ? '50%' : 'calc(100% - 25px)' }}\n        >\n          <NMRium\n            data={data}\n            preferences={{\n              general: {\n                disableMultipletAnalysis: true,\n                hideSetSumFromMolecule: true,\n              },\n              panels: {\n                hidePeaksPanel: true,\n                hideInformationPanel: true,\n                hideRangesPanel: true,\n                hideStructuresPanel: true,\n                hideFiltersPanel: true,\n                hideZonesPanel: true,\n                hideSummaryPanel: true,\n                hideMultipleSpectraAnalysisPanel: true,\n              },\n            }}\n          />\n        </div>\n        <button css={showButton} type=\"button\" onClick={showAnswerAreaHander}>\n          {!answerAreaVisible ? 'Show answer area' : 'Hide answer area '}\n        </button>\n        <div\n          css={bottomContainer}\n          style={\n            answerAreaVisible\n              ? { height: '50%' }\n              : { height: '0%', visibility: 'hidden' }\n          }\n        >\n          <div css={structureEditor}>\n            <StructureEditor\n              svgMenu\n              fragment={false}\n              onChange={checkAnswer}\n              initialMolfile={data && data.answer && data.answer.currentAnswer}\n            />\n          </div>\n          <div css={bottomRightContainer}>\n            <div css={mfCss}>\n              <MF\n                style={{ color: 'navy', fontSize: 30 }}\n                mf={data && data.answer && data.answer.mf}\n              />\n            </div>\n            <div css={resultContainer}>\n              <CopyButton result={result} />\n              <div css={resultCss}>{result}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}